import React, { useState, useEffect } from 'react';
import jsPDF from 'jspdf';
import { 
    CopywritingData, 
    Pitch,
    PitchType,
    Language, 
    UserProfile, 
    CanvasData, 
    MarketResearchData,
    CanvasSection,
    TranslationKey
} from '../../types';
import { Button } from '../common/Button';
import { PitchModal } from './PitchModal';
import { AiPitchModal } from './AiPitchModal';
import { generatePitchContent } from '../../services/geminiService';
import { GENERIC_ERROR_MESSAGE } from '../../constants';

// PDF Export Helper Constants (similar to other components)
const A4_WIDTH_MM = 210;
const A4_HEIGHT_MM = 297;
const MARGIN_MM = 15;
const CONTENT_WIDTH_MM = A4_WIDTH_MM - 2 * MARGIN_MM;
const LINE_HEIGHT_NORMAL = 6; 
const LINE_HEIGHT_TITLE = 10; 
const LINE_HEIGHT_SECTION_TITLE = 8; 
const USER_PHOTO_SIZE_MM = 25;
const FOOTER_FONT_SIZE = 8;

// Added missing constants
const TITLE_FONT_SIZE = 20;
const SECTION_TITLE_FONT_SIZE = 16;
const TEXT_FONT_SIZE = 10;


interface PitchRefinerProps {
  copywritingData: CopywritingData;
  onUpdateData: (data: CopywritingData) => void;
  strategyData: Partial<CanvasData>;
  researchData: MarketResearchData;
  language: Language;
  t: (key: TranslationKey, defaultText?: string) => string;
  userProfile: UserProfile | null;
  openAiModalFlag: boolean;
  setOpenAiModalFlag: (isOpen: boolean) => void;
}

export const PitchRefiner: React.FC<PitchRefinerProps> = ({
  copywritingData,
  onUpdateData,
  strategyData,
  researchData,
  language,
  t,
  userProfile,
  openAiModalFlag,
  setOpenAiModalFlag,
}) => {
  const [isPitchModalOpen, setIsPitchModalOpen] = useState(false);
  const [editingPitch, setEditingPitch] = useState<Pitch | null>(null);
  const [isLoadingAi, setIsLoadingAi] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const handleOpenPitchModal = (pitch: Pitch | null = null) => {
    setEditingPitch(pitch);
    setIsPitchModalOpen(true);
  };

  const handleSavePitch = (pitchToSave: Pitch) => {
    let updatedPitches: Pitch[];
    if (editingPitch && pitchToSave.id) { // Editing existing pitch
      updatedPitches = copywritingData.pitches.map(p => p.id === pitchToSave.id ? pitchToSave : p);
    } else { // Adding new pitch
      updatedPitches = [...copywritingData.pitches, { ...pitchToSave, id: `pitch-${Date.now()}` }];
    }
    onUpdateData({ ...copywritingData, pitches: updatedPitches });
    setIsPitchModalOpen(false);
    setEditingPitch(null);
  };

  const handleDeletePitch = (pitchId: string) => {
    if (window.confirm(t('delete_button') + ` "${copywritingData.pitches.find(p=>p.id === pitchId)?.title || 'pitch'}"?`)) {
        const updatedPitches = copywritingData.pitches.filter(p => p.id !== pitchId);
        onUpdateData({ ...copywritingData, pitches: updatedPitches });
    }
  };

  const handleAiGeneratePitch = async (inputs: { pitchType: PitchType; targetAudience: string; keyMessage: string; numEmails?: number }) => {
    if (!strategyData || Object.keys(strategyData).filter(k=>strategyData[k as CanvasSection]?.trim()).length === 0) {
        setError(t('mra_questions_ai_requires_canvas_note')); // Re-use relevant error message
        return;
    }
    setIsLoadingAi(true);
    setError(null);
    try {
      const generatedContent = await generatePitchContent(strategyData, researchData, inputs, language);
      if (generatedContent && generatedContent.title && generatedContent.content) {
        const newPitch: Pitch = {
          id: `pitch-ai-${Date.now()}`,
          type: inputs.pitchType,
          title: generatedContent.title,
          targetAudience: inputs.targetAudience,
          keyMessage: inputs.keyMessage,
          content: generatedContent.content,
          notes: language === 'am' ? 'በ AI የተፈጠረ ረቂቅ' : 'Draft generated by AI',
        };
        onUpdateData({ ...copywritingData, pitches: [...copywritingData.pitches, newPitch] });
        setOpenAiModalFlag(false);
      } else {
        setError(t('error_ai_failed_generic', "AI could not generate pitch content."));
      }
    } catch (e) {
      console.error(e);
      setError(t('error_ai_failed_generic'));
    } finally {
      setIsLoadingAi(false);
    }
  };
  
  const handleExportPitches = () => {
    const doc = new jsPDF();
    doc.setTextColor(50, 50, 50);
    const currentYRef = { value: MARGIN_MM };
    const totalPagesRef = { current: 1 };

    const addPageFooter = (pageNumber: number, totalPages: number) => {
        doc.setFontSize(FOOTER_FONT_SIZE);
        doc.setTextColor(120, 120, 120);
        const footerText = t('page_x_of_y').replace('{currentPage}', String(pageNumber)).replace('{totalPages}', String(totalPages));
        doc.text(footerText, MARGIN_MM, A4_HEIGHT_MM - MARGIN_MM / 2);
        doc.setTextColor(50, 50, 50);
    };
    
    const addText = (text: string | string[], x: number, options: any, lineHeight: number) => {
        const lines = Array.isArray(text) ? text : doc.splitTextToSize(text, CONTENT_WIDTH_MM - (x - MARGIN_MM));
        lines.forEach((line: string) => {
            if (currentYRef.value > A4_HEIGHT_MM - MARGIN_MM - lineHeight) {
                addPageFooter(doc.getNumberOfPages(), totalPagesRef.current);
                doc.addPage();
                totalPagesRef.current = doc.getNumberOfPages();
                currentYRef.value = MARGIN_MM;
            }
            doc.text(line, x, currentYRef.value, options);
            currentYRef.value += lineHeight;
        });
    };

    if (userProfile) {
        doc.setFontSize(SECTION_TITLE_FONT_SIZE);
        doc.setFont("helvetica", "bold");
        addText(t('pdf_made_by_title'), MARGIN_MM, {}, LINE_HEIGHT_SECTION_TITLE);
        doc.setFont("helvetica", "normal");
        doc.setFontSize(TEXT_FONT_SIZE);

        let textX = MARGIN_MM;
        if (userProfile.photo) {
            try {
                const base64Image = userProfile.photo.split(',')[1] || userProfile.photo;
                const imageType = userProfile.photo.startsWith('data:image/png') ? 'PNG' : 'JPEG';
                doc.addImage(base64Image, imageType, MARGIN_MM, currentYRef.value, USER_PHOTO_SIZE_MM, USER_PHOTO_SIZE_MM);
                textX = MARGIN_MM + USER_PHOTO_SIZE_MM + 5;
            } catch (e) { console.error("Error adding image to Pitches PDF:", e); }
        }
        
        const profileDetails = [
            `${t('user_profile_name_label')} ${userProfile.name}`,
            `${t('user_profile_email_label')} ${userProfile.email || '-'}`,
            `${t('user_profile_phone_label')} ${userProfile.phone || '-'}`,
            `${t('user_profile_other_details_label')} ${userProfile.otherDetails || '-'}`
        ];
        
        let textStartY = currentYRef.value;
        profileDetails.forEach(detail => {
             const lines = doc.splitTextToSize(detail, CONTENT_WIDTH_MM - (textX - MARGIN_MM));
             lines.forEach((line: string) => {
                 if (currentYRef.value > A4_HEIGHT_MM - MARGIN_MM - LINE_HEIGHT_NORMAL) {
                    addPageFooter(doc.getNumberOfPages(), totalPagesRef.current);
                    doc.addPage();
                    totalPagesRef.current = doc.getNumberOfPages();
                    currentYRef.value = MARGIN_MM;
                    textX = MARGIN_MM;
                 }
                 doc.text(line, textX, currentYRef.value);
                 currentYRef.value += LINE_HEIGHT_NORMAL;
            });
        });
        if (userProfile.photo) {
            currentYRef.value = Math.max(currentYRef.value, textStartY + USER_PHOTO_SIZE_MM + LINE_HEIGHT_NORMAL);
        } else {
            currentYRef.value += LINE_HEIGHT_NORMAL; 
        }
    }


    doc.setFontSize(TITLE_FONT_SIZE);
    doc.setFont("helvetica", "bold");
    addText(t('pdf_pitches_title'), MARGIN_MM, {}, LINE_HEIGHT_TITLE);
    currentYRef.value += LINE_HEIGHT_NORMAL / 2;

    doc.setFontSize(TEXT_FONT_SIZE - 2); // Smaller font for export date
    doc.setFont("helvetica", "normal");
    const exportDateText = `${t('exported_on_label')}: ${new Date().toLocaleString(language === 'am' ? 'am-ET' : 'en-US')}`;
    addText(exportDateText, MARGIN_MM, {}, LINE_HEIGHT_NORMAL);
    currentYRef.value += LINE_HEIGHT_NORMAL;

    copywritingData.pitches.forEach((pitch, index) => {
        if (index > 0) currentYRef.value += LINE_HEIGHT_NORMAL; // Space between pitches

        doc.setFontSize(SECTION_TITLE_FONT_SIZE - 2);
        doc.setFont("helvetica", "bold");
        addText(`${t('pdf_pitch_title')}: ${pitch.title}`, MARGIN_MM, {}, LINE_HEIGHT_SECTION_TITLE);
        
        doc.setFontSize(TEXT_FONT_SIZE);
        doc.setFont("helvetica", "normal");

        addText(`${t('pdf_pitch_type_label')}: ${t(pitch.type as TranslationKey, pitch.type)}`, MARGIN_MM + 2, {}, LINE_HEIGHT_NORMAL);
        addText(`${t('pdf_target_audience_label')}: ${pitch.targetAudience}`, MARGIN_MM + 2, {}, LINE_HEIGHT_NORMAL);
        addText(`${t('pdf_key_message_label')}: ${pitch.keyMessage}`, MARGIN_MM + 2, {}, LINE_HEIGHT_NORMAL);
        
        currentYRef.value += LINE_HEIGHT_NORMAL / 2;
        addText(pitch.content, MARGIN_MM + 2, {}, LINE_HEIGHT_NORMAL);

        if (pitch.notes) {
            currentYRef.value += LINE_HEIGHT_NORMAL / 2;
            addText(`${t('marketing_post_notes_label')}: ${pitch.notes}`, MARGIN_MM + 2, {}, LINE_HEIGHT_NORMAL);
        }
    });

    for (let i = 1; i <= totalPagesRef.current; i++) {
        doc.setPage(i);
        addPageFooter(i, totalPagesRef.current);
    }

    doc.save(language === 'am' ? 'የሀሳብ_ማቅረቢያዎች.pdf' : 'pitches_and_campaigns.pdf');
  };


  return (
    <div className="space-y-8">
      <div className="p-6 bg-slate-800 rounded-xl shadow-xl border border-slate-700">
        <div className="flex flex-col sm:flex-row justify-between items-center mb-6 gap-4">
          <h3 className="text-xl font-semibold text-blue-400">{t('copywriting_pitch_refinement_title')}</h3>
           <div className="flex space-x-3">
            <Button onClick={() => handleOpenPitchModal(null)} leftIcon={<PlusIcon className="h-5 w-5"/>} variant="secondary">
              {t('pitch_add_button')}
            </Button>
            <Button onClick={handleExportPitches} leftIcon={<DownloadIcon className="h-5 w-5"/>} variant="outline">
                {t('export_pitches_button')}
            </Button>
          </div>
        </div>

        {error && <p className="text-red-400 bg-red-900/30 p-3 rounded-lg mb-4 text-sm">{error}</p>}

        {copywritingData.pitches.length === 0 ? (
          <p className="text-slate-500 italic text-center py-6">{t('pitch_no_pitches_placeholder')}</p>
        ) : (
          <div className="space-y-4">
            {copywritingData.pitches.map(pitch => (
              <div key={pitch.id} className="p-4 bg-slate-700/50 rounded-lg shadow-md border border-slate-600 hover:shadow-lg transition-shadow">
                <div className="flex flex-col sm:flex-row justify-between sm:items-start gap-3">
                  <div className="flex-grow">
                    <h4 className="text-lg font-semibold text-slate-100">{pitch.title}</h4>
                    <p className="text-xs text-slate-400 mt-0.5 mb-1">
                      <span className="font-medium">{t('pitch_type_label')}</span> {t(pitch.type as TranslationKey, pitch.type)} | 
                      <span className="font-medium ml-2">{t('pitch_target_audience_label')}</span> {pitch.targetAudience}
                    </p>
                    <p className="text-sm text-slate-300 line-clamp-2">{pitch.content}</p>
                  </div>
                  <div className="flex-shrink-0 flex sm:flex-col items-end sm:items-center gap-2 pt-2 sm:pt-0">
                    <Button variant="outline" size="sm" onClick={() => handleOpenPitchModal(pitch)}>
                      {t('view_details_button')}
                    </Button>
                    <Button variant="danger" size="sm" onClick={() => handleDeletePitch(pitch.id)}>
                      {t('delete_button')}
                    </Button>
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>

      {isPitchModalOpen && (
        <PitchModal
          isOpen={isPitchModalOpen}
          onClose={() => { setIsPitchModalOpen(false); setEditingPitch(null); }}
          onSave={handleSavePitch}
          pitchData={editingPitch}
          language={language}
          t={t}
        />
      )}

      {openAiModalFlag && (
        <AiPitchModal
          isOpen={openAiModalFlag}
          onClose={() => setOpenAiModalFlag(false)}
          onGenerate={handleAiGeneratePitch}
          isLoading={isLoadingAi}
          language={language}
          t={t}
        />
      )}
    </div>
  );
};

// --- SVG Icons ---
const PlusIcon: React.FC<React.SVGProps<SVGSVGElement>> = (props) => (
  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" {...props}>
    <path d="M10.75 4.75a.75.75 0 00-1.5 0v4.5h-4.5a.75.75 0 000 1.5h4.5v4.5a.75.75 0 001.5 0v-4.5h4.5a.75.75 0 000-1.5h-4.5v-4.5z" />
  </svg>
);
const DownloadIcon: React.FC<React.SVGProps<SVGSVGElement>> = (props) => (
  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}>
    <path strokeLinecap="round" strokeLinejoin="round" d="M3 16.5v2.25A2.25 2.25 0 005.25 21h13.5A2.25 2.25 0 0021 18.75V16.5M16.5 12L12 16.5m0 0L7.5 12m4.5 4.5V3" />
  </svg>
);
const SpinnerIcon: React.FC<React.SVGProps<SVGSVGElement>> = (props) => (
  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth="1.5" {...props} className={`animate-spin ${props.className || ''}`}>
    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="3"></circle>
    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
  </svg>
);
const SparklesIcon: React.FC<React.SVGProps<SVGSVGElement>> = (props) => (
  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" {...props}>
    <path strokeLinecap="round" strokeLinejoin="round" d="M9.813 15.904L9 18.75l-.813-2.846a4.5 4.5 0 00-3.09-3.09L1.25 12l2.846-.813a4.5 4.5 0 003.09-3.09L9 5.25l.813 2.846a4.5 4.5 0 003.09 3.09L15.75 12l-2.846.813a4.5 4.5 0 00-3.09 3.09zM18.25 7.5l.813 2.846a4.5 4.5 0 01-3.09 3.09L12.187 15l-2.846.813a4.5 4.5 0 01-3.09-3.09L5.437 10.5l2.846-.813a4.5 4.5 0 013.09-3.09L12 3.75l.813 2.846a4.5 4.5 0 013.09 3.09L18.75 9l-2.846.813a4.5 4.5 0 01-3.09-3.09L12.187 6 12 5.25l.187.75z" />
  </svg>
);
// Note: No 'export default PitchRefiner;' at the end
